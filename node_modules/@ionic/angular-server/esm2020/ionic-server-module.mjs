import { DOCUMENT } from '@angular/common';
import { APP_ID, NgModule } from '@angular/core';
import { BEFORE_APP_SERIALIZED } from '@angular/platform-server';
import { hydrateDocument } from '@ionic/core/hydrate';
import * as i0 from "@angular/core";
// @dynamic
export class IonicServerModule {
}
/** @nocollapse */ IonicServerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: IonicServerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ IonicServerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.2.12", ngImport: i0, type: IonicServerModule });
/** @nocollapse */ IonicServerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: IonicServerModule, providers: [
        {
            provide: BEFORE_APP_SERIALIZED,
            useFactory: hydrateIonicComponents,
            multi: true,
            deps: [DOCUMENT, APP_ID],
        },
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.12", ngImport: i0, type: IonicServerModule, decorators: [{
            type: NgModule,
            args: [{
                    providers: [
                        {
                            provide: BEFORE_APP_SERIALIZED,
                            useFactory: hydrateIonicComponents,
                            multi: true,
                            deps: [DOCUMENT, APP_ID],
                        },
                    ],
                }]
        }] });
// @dynamic
export function hydrateIonicComponents(doc, appId) {
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    return () => {
        return hydrateDocument(doc, {
            clientHydrateAnnotations: false,
            excludeComponents: [
                // overlays
                'ion-action-sheet',
                'ion-alert',
                'ion-loading',
                'ion-modal',
                'ion-picker',
                'ion-popover',
                'ion-toast',
                'ion-toast',
                // navigation
                'ion-router',
                'ion-route',
                'ion-route-redirect',
                'ion-router-link',
                'ion-router-outlet',
                // tabs
                'ion-tabs',
                'ion-tab',
                // auxiliar
                'ion-picker-column',
            ],
        }).then((hydrateResults) => {
            hydrateResults.diagnostics.forEach((d) => {
                if (d.type === 'error') {
                    console.error(d.messageText);
                }
                else if (d.type === 'debug') {
                    console.debug(d.messageText);
                }
                else {
                    console.log(d.messageText);
                }
            });
            if (doc.head != null) {
                const styleElms = doc.head.querySelectorAll('style[data-styles]');
                // eslint-disable-next-line @typescript-eslint/prefer-for-of
                for (let i = 0; i < styleElms.length; i++) {
                    styleElms[i].setAttribute('ng-transition', appId);
                }
            }
            if (doc.body != null) {
                const ionPages = doc.body.querySelectorAll('.ion-page.ion-page-invisible');
                // eslint-disable-next-line @typescript-eslint/prefer-for-of
                for (let i = 0; i < ionPages.length; i++) {
                    ionPages[i].classList.remove('ion-page-invisible');
                }
            }
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9uaWMtc2VydmVyLW1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pb25pYy1zZXJ2ZXItbW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7O0FBRXRELFdBQVc7QUFXWCxNQUFNLE9BQU8saUJBQWlCOztrSUFBakIsaUJBQWlCO21JQUFqQixpQkFBaUI7bUlBQWpCLGlCQUFpQixhQVRqQjtRQUNUO1lBQ0UsT0FBTyxFQUFFLHFCQUFxQjtZQUM5QixVQUFVLEVBQUUsc0JBQXNCO1lBQ2xDLEtBQUssRUFBRSxJQUFJO1lBQ1gsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQztTQUN6QjtLQUNGOzRGQUVVLGlCQUFpQjtrQkFWN0IsUUFBUTttQkFBQztvQkFDUixTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLHFCQUFxQjs0QkFDOUIsVUFBVSxFQUFFLHNCQUFzQjs0QkFDbEMsS0FBSyxFQUFFLElBQUk7NEJBQ1gsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQzt5QkFDekI7cUJBQ0Y7aUJBQ0Y7O0FBR0QsV0FBVztBQUNYLE1BQU0sVUFBVSxzQkFBc0IsQ0FBQyxHQUFRLEVBQUUsS0FBVTtJQUN6RCw2RUFBNkU7SUFDN0UsT0FBTyxHQUFHLEVBQUU7UUFDVixPQUFPLGVBQWUsQ0FBQyxHQUFHLEVBQUU7WUFDMUIsd0JBQXdCLEVBQUUsS0FBSztZQUMvQixpQkFBaUIsRUFBRTtnQkFDakIsV0FBVztnQkFDWCxrQkFBa0I7Z0JBQ2xCLFdBQVc7Z0JBQ1gsYUFBYTtnQkFDYixXQUFXO2dCQUNYLFlBQVk7Z0JBQ1osYUFBYTtnQkFDYixXQUFXO2dCQUNYLFdBQVc7Z0JBRVgsYUFBYTtnQkFDYixZQUFZO2dCQUNaLFdBQVc7Z0JBQ1gsb0JBQW9CO2dCQUNwQixpQkFBaUI7Z0JBQ2pCLG1CQUFtQjtnQkFFbkIsT0FBTztnQkFDUCxVQUFVO2dCQUNWLFNBQVM7Z0JBRVQsV0FBVztnQkFDWCxtQkFBbUI7YUFDcEI7U0FDRixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxFQUFFLEVBQUU7WUFDekIsY0FBYyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDdkMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLE9BQU8sRUFBRTtvQkFDdEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQzlCO3FCQUFNLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxPQUFPLEVBQUU7b0JBQzdCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2lCQUM5QjtxQkFBTTtvQkFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztpQkFDNUI7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUVILElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLEVBQUU7Z0JBQ3BCLE1BQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsb0JBQW9CLENBQWlDLENBQUM7Z0JBQ2xHLDREQUE0RDtnQkFDNUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3pDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO2lCQUNuRDthQUNGO1lBRUQsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRTtnQkFDcEIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyw4QkFBOEIsQ0FBNEIsQ0FBQztnQkFDdEcsNERBQTREO2dCQUM1RCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDeEMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztpQkFDcEQ7YUFDRjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEFQUF9JRCwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJFRk9SRV9BUFBfU0VSSUFMSVpFRCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLXNlcnZlcic7XG5pbXBvcnQgeyBoeWRyYXRlRG9jdW1lbnQgfSBmcm9tICdAaW9uaWMvY29yZS9oeWRyYXRlJztcblxuLy8gQGR5bmFtaWNcbkBOZ01vZHVsZSh7XG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEJFRk9SRV9BUFBfU0VSSUFMSVpFRCxcbiAgICAgIHVzZUZhY3Rvcnk6IGh5ZHJhdGVJb25pY0NvbXBvbmVudHMsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICAgIGRlcHM6IFtET0NVTUVOVCwgQVBQX0lEXSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBJb25pY1NlcnZlck1vZHVsZSB7fVxuXG4vLyBAZHluYW1pY1xuZXhwb3J0IGZ1bmN0aW9uIGh5ZHJhdGVJb25pY0NvbXBvbmVudHMoZG9jOiBhbnksIGFwcElkOiBhbnkpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXNcbiAgcmV0dXJuICgpID0+IHtcbiAgICByZXR1cm4gaHlkcmF0ZURvY3VtZW50KGRvYywge1xuICAgICAgY2xpZW50SHlkcmF0ZUFubm90YXRpb25zOiBmYWxzZSxcbiAgICAgIGV4Y2x1ZGVDb21wb25lbnRzOiBbXG4gICAgICAgIC8vIG92ZXJsYXlzXG4gICAgICAgICdpb24tYWN0aW9uLXNoZWV0JyxcbiAgICAgICAgJ2lvbi1hbGVydCcsXG4gICAgICAgICdpb24tbG9hZGluZycsXG4gICAgICAgICdpb24tbW9kYWwnLFxuICAgICAgICAnaW9uLXBpY2tlcicsXG4gICAgICAgICdpb24tcG9wb3ZlcicsXG4gICAgICAgICdpb24tdG9hc3QnLFxuICAgICAgICAnaW9uLXRvYXN0JyxcblxuICAgICAgICAvLyBuYXZpZ2F0aW9uXG4gICAgICAgICdpb24tcm91dGVyJyxcbiAgICAgICAgJ2lvbi1yb3V0ZScsXG4gICAgICAgICdpb24tcm91dGUtcmVkaXJlY3QnLFxuICAgICAgICAnaW9uLXJvdXRlci1saW5rJyxcbiAgICAgICAgJ2lvbi1yb3V0ZXItb3V0bGV0JyxcblxuICAgICAgICAvLyB0YWJzXG4gICAgICAgICdpb24tdGFicycsXG4gICAgICAgICdpb24tdGFiJyxcblxuICAgICAgICAvLyBhdXhpbGlhclxuICAgICAgICAnaW9uLXBpY2tlci1jb2x1bW4nLFxuICAgICAgXSxcbiAgICB9KS50aGVuKChoeWRyYXRlUmVzdWx0cykgPT4ge1xuICAgICAgaHlkcmF0ZVJlc3VsdHMuZGlhZ25vc3RpY3MuZm9yRWFjaCgoZCkgPT4ge1xuICAgICAgICBpZiAoZC50eXBlID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihkLm1lc3NhZ2VUZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmIChkLnR5cGUgPT09ICdkZWJ1ZycpIHtcbiAgICAgICAgICBjb25zb2xlLmRlYnVnKGQubWVzc2FnZVRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGQubWVzc2FnZVRleHQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKGRvYy5oZWFkICE9IG51bGwpIHtcbiAgICAgICAgY29uc3Qgc3R5bGVFbG1zID0gZG9jLmhlYWQucXVlcnlTZWxlY3RvckFsbCgnc3R5bGVbZGF0YS1zdHlsZXNdJykgYXMgTm9kZUxpc3RPZjxIVE1MU3R5bGVFbGVtZW50PjtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItZm9yLW9mXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3R5bGVFbG1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgc3R5bGVFbG1zW2ldLnNldEF0dHJpYnV0ZSgnbmctdHJhbnNpdGlvbicsIGFwcElkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZG9jLmJvZHkgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBpb25QYWdlcyA9IGRvYy5ib2R5LnF1ZXJ5U2VsZWN0b3JBbGwoJy5pb24tcGFnZS5pb24tcGFnZS1pbnZpc2libGUnKSBhcyBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PjtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItZm9yLW9mXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW9uUGFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpb25QYWdlc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdpb24tcGFnZS1pbnZpc2libGUnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuIl19